@page "/"
@using LoginTest.Controller
@using LoginTest.Data.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject AccountController accountController
@inject UserManager<AppUser> userManager
@inject SignInManager<AppUser> signInManager
@inject AuthenticationStateProvider ASP
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<hr />

<EditForm Model="input" method="post" FormName="login">
	<DataAnnotationsValidator />
	<InputText @bind-Value="input.userName"/><br />
	<ValidationMessage For="() => input.userName" />
	<InputText @bind-Value="input.passWord" /><br />
	<ValidationMessage For="() => input.passWord" />
	<button type="submit" @onclick="loginAsync">Login</button><br />
	<button type="submit" @onclick="registerAsync">Register</button>
</EditForm>
<button @onclick="refreshAuthStateAsync">Refresh Auth State</button>
<p>Status: @status</p>
<p>Auth state: @currentAuthState</p>

<hr />
Roles<br />
Role:<input @bind="role" />
<button @onclick="addRole">Add Role</button>
<table style="text-align: right;">
@for(int i =0 ;i<roles.Count;i++)
{
	var j = i;
	<tr><td>@roles[i].role.Name</td><td><button @onclick="() => delRole(j)">Delete</button></td>
			@foreach (Claim c in roles[i].claims)
			{
				var c1 = c;
				<td>@c.Type -> @c.Value <button @onclick="() => delRoleClaim(j, c1)">Delete</button></td>
			}

	</tr>
}
</table>

<hr />
Users<br />
User:<input @bind="user2" />
Role:<input @bind="role2" />
<button @onclick="assignRole">Assign Role to user</button>

<table style="text-align: right;">
@foreach (UserModel xuser in users)
{
	var u = @xuser.user.UserName;
	<tr><td>
	<span>@u</span>
	<span>:</span>
			</td>
	@foreach(var role in xuser.roles)
	{
		var r = role;
		<td>@r <button @onclick="() => delUserRole(u, r)">Delete</button></td>
	}
	</tr>
}
</table>

<hr />
Add claims <br />
Label:
<input @bind="claim.label" />
Type:<input @bind="claim.type" />
Value:<input @bind="claim.value" />
<button @onclick="addRoleClaim">Add claim to role</button>
<button @onclick="addUserClaim">Add claim to user</button>

<hr />
<p>Authorize View</p>
<AuthorizeView>
<Authorized>
	<p>User is authorised</p>
</Authorized>
<NotAuthorized>
	<p>User not authorised</p>
</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel input { get; set; } = new();
	[SupplyParameterFromForm]
	private ClaimModel claim { get; set; } = new();

	private string? status { get; set; }
	private string? currentAuthState { get; set; }
	private string? role { get; set; }
	private string user2 { get; set; }
	private List<string> userRoles { get; set; } = new();
	private string role2 { get; set; }
	private List<RoleClaims>? roles = new();
	private List<UserModel>? users = new();
	private UserRoles userRolesComponent;

	public async Task addRoleClaim()
	{
		var result = await accountController.addRoleClaim(claim.label, claim.type, claim.value);
		if (result.Succeeded)
		{
			status = "Claim added to role";	
		} else
		{
			status = "Claim not added to role";
		}
		await updateRoles();
	}
	public async Task addUserClaim()
	{
		var result = await accountController.addUserClaim(claim.label, claim.type, claim.value);
		if (result.Succeeded)
		{
			status = "Claim added to user";
		}
		else
		{
			status = "Claim not added to user";
		}
		await updateUsers();
	}

	protected override async Task OnInitializedAsync()
	{
		//roles = await accountController.getRoles();
		await updateRoles();
		await updateUsers();
		//users = await accountController.getUsers();

		await base.OnInitializedAsync();
	}

	public async Task updateUsers()
	{
		users = new();
		var userList = await accountController.getUsers();
		foreach(AppUser u in userList)
		{
			UserModel um = new();
			List<string> useroles = await accountController.getRoles(u.UserName);
			um.user = u;
			um.roles = useroles;
			users.Add(um);
		}
		StateHasChanged();
	}
	public async Task updateRoles()
	{
		roles = new();
		var roleList = await accountController.getRoles();
		foreach (var r in roleList)
		{
			RoleClaims rm = new();
			rm.role = r;
			rm.claims = await accountController.getRoleClaims(rm.role.Name);
			roles.Add(rm);
		}
	}


	public async Task registerAsync()
	{
		if (await accountController.getUser(input.userName) is null)
		{
			if ( (await accountController.register(input.userName, input.passWord)).Succeeded)
			{
				status = "Registered user";
			} else
			{
				status = "Registration failed";
			}

		} else
		{
			status = "Cant register, user exists";
		}
	}


	public async Task loginAsync()
	{
		var user = await userManager.Users.FirstOrDefaultAsync(x => x.UserName.ToLower() == input.userName.ToLower());
		if (user == null) { 
			status = "User not found"; 
			return; 
		}
		signInManager.SignOutAsync();
		var result = await signInManager.CheckPasswordSignInAsync(user, input.passWord, false);
		if (result.Succeeded)
		{
			status = "User signed in";
		} else
		{
			status = "User NOT signed in";
		}

		var s = await getAuthStateAsync(ASP);
	}
	public async Task refreshAuthStateAsync()
	{
		var s = await getAuthStateAsync(ASP);
		currentAuthState = s;
	}

	public async Task<string> getAuthStateAsync(AuthenticationStateProvider authStateProvider)
	{
		var authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			return $"{user.Identity.Name} is authenticated";
		} else
		{
			return "No user authenticated";
		}
	}
	public async Task addRole()
	{
		await accountController.addRole(role);
		NavigationManager.Refresh(true);
	}
	public async Task deleteRole()
	{
		await accountController.deleteRole(role);
		NavigationManager.Refresh(true);
	}
	public async Task delRole(int r)
	{
		string role = roles[r].role.ToString();
		await accountController.deleteRole(role);
		NavigationManager.Refresh(true);
	}
	public async Task delUserRole(string user, string role)
	{
		await accountController.deleteAssignRole(user, role);
		updateUsers();
	}
	public async Task delRoleClaim(int r, Claim claim)
	{
		string role = roles[r].role.ToString();
		await accountController.delRoleClaim(role, claim);
		await updateRoles();
		return;
	}
	public async Task assignRole()
	{
		await accountController.assignRole(user2, role2);
		updateUsers();
	}

	public async Task getUserRoles()
	{
		userRoles = await accountController.getRoles(user2);
	}

	private sealed class InputModel
	{
		[Required]
		public string userName { get; set; } = "";

		[Required]
		public string passWord { get; set; } = "";
	}

	private class ClaimModel
	{
		[Required]
		public string label { get; set; } = "";
		[Required]
		public string type { get; set; } = "";
		[Required]
		public string value { get; set; } = "";

	}
	private class UserModel
	{
		public AppUser user { get; set;}
		public List<string> roles { get; set;}

	}
	private class RoleClaims
	{
		public IdentityRole role { get; set; } 
		public IList<Claim> claims { get; set; }
	}
}